	math.randomseed(os.time())

	go.property("speed", 0)
	go.property("couleur", 0)
	go.property("id", 1)
	go.property("nom", "")

	
function init(self)

	
	lua_ecrire_systeme(self.id, "ID", self.id)
	
	-- Create rotation of star
	local vitesse = math.random(1, 10)
	self.speed = vitesse
	go.animate(".", "euler.z", go.PLAYBACK_LOOP_FORWARD, 360, go.EASING_LINEAR, 60/self.speed)

	-- Set colour of star
	local couleur = math.random(1,7)
	lua_ecrire_systeme(self.id, "couleur", liste_etoiles[couleur])
	couleur1 = "E_"..liste_etoiles[couleur]
	msg.post("#sprite", "play_animation", {id = hash(couleur1)})
	-- Put the close sprite for Stars in invisible (transparency = 0)
	sprite.set_constant("#sprite_close", "tint", vmath.vector4(1, 1, 1, 0))
	couleur2 = "etoile_"..liste_etoiles[couleur]
	msg.post("#sprite_close", "play_animation", {id = hash(couleur2)})
	
	-- name of the star
	local name = StarNameGeneration(self.id)
	lua_ecrire_systeme(self.id, "nom", name)
	label.set_text("Label#label", name)
	
	-- Number of Elements in this star systeme
	nb = 0
	-- size of temp zones (orbits in each temp)
	local zone = 0
	local temp_chaud = math.random(0, couleur_temp[couleur]["chaud"])
	local temp_moderate = math.random(0, couleur_temp[couleur]["chaud"]) + temp_chaud
	local temperature = 0

	for i = 1, Systeme_Orbits do
		local orbite = math.random(1, total_orbit_chance[0])
		orbite_nb = "orbite_"..i
	
		j = 1
		-- Look in the list of Orbitals possibilities if orbit has some object
		while orbite > total_orbit_chance[j] do
			j = j + 1
		end
		lua_ecrire_systeme(self.id, orbite_nb, j)

					-- Size of the orbital object
		if #liste_orbitals[j]["taille"] > 0 then
			local taille = math.random(1, #liste_orbitals[j]["taille"])
			local taille2 = orbite_nb.."_taille"
			lua_ecrire_systeme(self.id, taille2, taille)
		end
	
		-- Temperature on the orbit
		zone = zone + 1
		if zone <= temp_chaud then
			temperature = 1
		elseif zone <= temp_moderate then
			temperature = 2
		else
			temperature = 3
		end
		local temp2 = orbite_nb.."_temp"
		lua_ecrire_systeme(self.id, temp2, temperature)

		-- Humidity of the orbital object
		local humidite = math.random(1, #lua_SV_wetness_orbit["nom"])
		local humidite2 = orbite_nb.."_humidite"
		lua_ecrire_systeme(self.id, humidite2, humidite)

		-- Zones of the orbital object (first, land / ocean)
		local t = lua_SV_wetness_orbit["nb_zones_water"][humidite]
		local s = {}
		for i_zone = 1, #t do
			s[i_zone] = t[i_zone]
		end
		for i_zone = #t, 2, -1 do
			local j_zone = math.random(3)
			s[i_zone], s[j_zone] = s[j_zone], s[i_zone]
		end
		local zone = orbite_nb.."_zone"
		lua_ecrire_systeme(self.id, zone, s)
		
	end
end


function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)

	
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	
	if message_id == hash("trigger_response") then
		if message.enter and Is_planet_screen_exist == false then
			
			-- take action for entry
			go.set_scale(2)
			msg.post(message.other_id, "etoile_click", {click = true, id = self.id})
		else
			-- take action for exit
			go.set_scale(1)
			msg.post(message.other_id, "etoile_click", {click = false, id = self.id})
		end
	end
	
end

function on_input(self, action_id, action)
	
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
