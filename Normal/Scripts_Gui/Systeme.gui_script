require "Normal.Luas.serveur_variables"

function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed

	msg.post(".", "acquire_input_focus")

	
	local node = gui.get_node('Image_etoile')
	local node2 = gui.get_node('Image_etoile_fond')
	gui.animate(node, "color.w", 1.5, gui.EASING_LINEAR, 5, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
	gui.animate(node2, "scale", 1.5, gui.EASING_LINEAR, 5, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)


	-- initialize variable for planet screen existing or not
	Is_planet_screen_exist = false
	
	--gui root box position.
	
	-- Actuall size of the game's screen 
	--local sg_screen_game = {window.get_size()}
	--local sg_node = gui.get_node('root')
	--local sg_position = vmath.vector3(sg_screen_game[1]/2, sg_screen_game[2]/2, 0)
	--local sg_size = vmath.vector3(sg_screen_game[1], sg_screen_game[2], 0)
	--gui.set_position(sg_node, sg_position)
	--gui.set_size(sg_node, sg_size)
	
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)

	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)


	if message_id == hash("curseur_etoile_click") then
		local node = gui.get_node('Systeme')
		if message.id ~= nil then
			-- open system screen. Bar (planete still closed)
			barre_systeme(node, message.id)
			Gui_entered = node
			Gui_systeme.etoile_clicked = message.id
			Gui_systeme.orbite_clicked = 0
		elseif Gui_systeme.etoile_clicked > 0 then 
			-- close system screens. Bar and zone (planete)
			Gui_entered = nil
			Gui_systeme.etoile_clicked = 0
			Gui_systeme.orbite_clicked = 0
			ecran_orbite(0, 0)
			barre_systeme(node, 0)
		end
	end
end

function on_input(self, action_id, action)

	-- If cursor is in System Bar Gui
	local node = gui.get_node('Systeme')
	node_enabled = gui.is_enabled(node)
	node_entered = gui.pick_node(node, action.x, action.y)
	if node_entered and node_enabled then 
		Gui_entered = node
	else
		local node = gui.get_node('Ecran_Orbite')
		node_enabled = gui.is_enabled(node)
		node_entered = gui.pick_node(node, action.x, action.y)
		if node_entered and node_enabled then 
			Gui_entered = node
		else
			Gui_entered = nill
		end
	end


	if action.pressed and action_id == hash("touch") then
		if node_entered and node_enabled then
			--	print ("node entered and enabled (Systeme.gui_script)")
			-- If System bar GUI entered AND clicked, look if one of the Orbit "Buttons" are clicked
			node2 = gui.get_node("Ecran_Orbite")
			if gui.pick_node(node2, action.x, action.y) then
				-- If click on Systeme Screen, don't change the "click Gui zone"
			else
				-- Is click on the Systeme Bar ?
				local orbit_clicked = 0
				for i = 1, Systeme_Orbits do
					node2 = gui.get_node("bouton_orbit_"..i)
					if gui.pick_node(node2, action.x, action.y) then
						orbit_clicked = i
					end
				end
				Gui_systeme.orbite_clicked = orbit_clicked
				-- If an orbit is found to be clicked, open the Orbit Screen with the Star and Orbit numbers as data
				if Gui_systeme.orbite_clicked > 0 then
					ecran_orbite(Gui_systeme.etoile_clicked, Gui_systeme.orbite_clicked)
				else
					ecran_orbite(0, 0)
				end
			end
		end
	end
			
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end

function ecran_orbite(etoile, orbite)
	local node_orbite = gui.get_node("Ecran_Orbite")
	local zone = {}
	if orbite < 1 then
		gui.set_enabled(node_orbite, false)
	else
		if lua_lire_systeme(etoile, "orbite_"..orbite) == 1 then
			pprint ("Espace libre")
			zone = ecran_espace(etoile, orbite)
		elseif lua_lire_systeme(etoile, "orbite_"..orbite) == 2 then
			pprint ("Rock planet")
			zone = ecran_rock_planet(etoile, orbite)
		elseif	lua_lire_systeme(etoile, "orbite_"..orbite) == 3 then
			pprint ("Gaz planet")
			zone = ecran_gaz_planet(etoile, orbite)
		elseif	lua_lire_systeme(etoile, "orbite_"..orbite) == 4 then
			pprint ("Asteroids")
			zone = ecran_asteroids(etoile, orbite)
		else
			pprint ("Type d'orbite inconnu")
		end
		gui.set_enabled(node_orbite, true)
		for i = 1, 3 do
			local posX = -310 + i*320
			-- Placing the "click zone" from each orbit (the black rectangle zone, basically)
			local pos = vmath.vector3(posX, -580, 0)
			local size = vmath.vector3(300, 1000, 0)
			local node = gui.new_box_node(pos,size)
			gui.set_pivot(node, gui.PIVOT_W)
			gui.set_parent(node, node_orbite)
			gui.set_layer(node, "Groups")
			gui.set_alpha(node, 1)
			gui.set_id(node, "zone_orbite"..i)
			gui.set_texture(node, "Interface")
			--local zone = "orbite_"..i.."_zone"
			gui.play_flipbook(node, zone[i])
--			gui.play_flipbook(node, lua_zone_climatique[lua_lire_systeme(etoile, "orbite_"..orbite)][lua_lire_systeme(etoile,"orbite_"..orbite.."_zone", i)])
			end
		-- Placing local Orbital zone
		local posX = -310 + 4*320
		-- Placing the "click zone" from each orbit (the black rectangle zone, basically)
		local pos = vmath.vector3(posX, -580, 0)
		local size = vmath.vector3(300, 1000, 0)
		local node = gui.new_box_node(pos,size)
		gui.set_pivot(node, gui.PIVOT_W)
		gui.set_parent(node, node_orbite)
		gui.set_layer(node, "Groups")
		gui.set_alpha(node, 1)
		gui.set_id(node, "orbite")
		gui.set_texture(node, "Interface")
		--local zone = "orbite__zone"
		gui.play_flipbook(node, zone[4])
--		gui.play_flipbook(node, lua_zone_climatique[lua_lire_systeme(etoile, "orbite_"..orbite)][3])
	end
end

function ecran_espace(etoile, orbite)
	local zone = {}
	zone[1] = lua_zone_climatique[1][1]
	zone[2] = lua_zone_climatique[1][1]
	zone[3] = lua_zone_climatique[1][1]
	zone[4] = lua_zone_climatique[1][1]
	return zone
end

function ecran_rock_planet(etoile, orbite)
	local zone = {}
	zone[1] = lua_zone_climatique[lua_lire_systeme(etoile, "orbite_"..orbite)][lua_lire_systeme(etoile,"orbite_"..orbite.."_zone", 1)]
	zone[2] = lua_zone_climatique[lua_lire_systeme(etoile, "orbite_"..orbite)][lua_lire_systeme(etoile,"orbite_"..orbite.."_zone", 2)]
	zone[3] = lua_zone_climatique[lua_lire_systeme(etoile, "orbite_"..orbite)][lua_lire_systeme(etoile,"orbite_"..orbite.."_zone", 3)]
	zone[4] = lua_zone_climatique[lua_lire_systeme(etoile, "orbite_"..orbite)][3]
	return zone
end

function ecran_gaz_planet(etoile, orbite)
	local zone = {}
	zone[1] = lua_zone_climatique[3][1]
	zone[2] = lua_zone_climatique[3][2]
	zone[3] = lua_zone_climatique[3][3]
	zone[4] = lua_zone_climatique[3][4]
	return zone
end

function ecran_asteroids(etoile, orbite)
	local zone = {}
	zone[1] = lua_zone_climatique[4][1]
	zone[2] = lua_zone_climatique[4][1]
	zone[3] = lua_zone_climatique[4][1]
	zone[4] = lua_zone_climatique[4][2]
	return zone
end


function barre_systeme(node_etoile, id)
	if id < 1 then
		gui.set_enabled(node_etoile, false)
	else
		gui.set_enabled(node_etoile, true)
		local couleur = lua_lire_systeme(id, "couleur")
		-- show characteristics of the star
		-- Name
		local nom_etoile = lua_lire_systeme(id, "nom")
		local node = gui.get_node("text")
		gui.set_text(node, nom_etoile)
		-- Colour
		node = gui.get_node("Image_etoile")
		gui.set_texture(node, "Systeme")
		gui.play_flipbook(node, "etoile_"..couleur)
		node = gui.get_node("Image_etoile_fond")
		gui.set_texture(node, "Systeme")
		gui.play_flipbook(node, "couronne_"..couleur)
		-- Destroy the pre-existing orbitals boxes
		local node_boite = gui.get_node("boite_orbites")
		gui.delete_node(node_boite)
		-- Create new Orbitals box (contain all the orbitals data)
		node = gui.get_node("Systeme")
		local pos = vmath.vector3(0, 0, 0)
		local size = vmath.vector3(1, 1, 0)
		local node_boite = gui.new_box_node(pos,size)
		gui.set_id(node_boite, "boite_orbites")
		gui.set_parent(node_boite, node)
		-- List orbitals 
		for i = 1, Systeme_Orbits do
			local posY = -225 - (i-1)*150
			-- Placing the "click zone" from each orbit (the black rectangle zone, basically)
			local orbital_pos = vmath.vector3(32, posY-40, 0)
			local orbital_size = vmath.vector3(265, 80, 0)
			local node_orbit = gui.new_box_node(orbital_pos,orbital_size)
			gui.set_color(node_orbit, vmath.vector4(255/255, 0/255, 0/255, 1))
			gui.set_pivot(node_orbit, gui.PIVOT_W)
			gui.set_parent(node_orbit, node_boite)
			gui.set_layer(node_orbit, "Texte")
			gui.set_alpha(node_orbit, 0.0)
			gui.set_id(node_orbit, "bouton_orbit_"..i)
			-- Text indicating type of orbital object
			local this_nom = liste_orbitals[lua_lire_systeme(id, "orbite_"..i)]["nom"]
			local this_pos = vmath.vector3(110, posY-20, 0)
			local node2_texte = gui.new_text_node(this_pos,this_nom)
			gui.set_id(node2_texte, "texte_orbit"..i)
			gui.set_parent(node2_texte, node_boite)
			gui.set_layer(node2_texte, "Texte")
			gui.set_pivot(node2_texte, gui.PIVOT_W)
			if  #liste_orbitals[lua_lire_systeme(id, "orbite_"..i)]["taille"] > 0 then
				-- Text indicating size of orbital object
				local taille_nom =  liste_orbitals[lua_lire_systeme(id, "orbite_"..i)]["taille"][lua_lire_systeme(id, "orbite_"..i.."_taille")]
				local taille_pos = vmath.vector3(130, posY-44, 0)
				local node_taille_texte = gui.new_text_node(taille_pos,taille_nom)
				gui.set_id(node_taille_texte, "texte_orbit_size"..i)
				gui.set_parent(node_taille_texte, node_boite)
				gui.set_layer(node_taille_texte, "Texte")
				gui.set_pivot(node_taille_texte, gui.PIVOT_W)
				-- text indicating humidity of orbit
				local humidite_nom =  lua_SV_wetness_orbit["nom"][lua_lire_systeme(id, "orbite_"..i.."_humidite")]
				local humidite_pos = vmath.vector3(200, posY-60, 0)
				local node_humidite_texte = gui.new_text_node(humidite_pos,humidite_nom)
				gui.set_color(node_humidite_texte, vmath.vector4(0/255, 255/255, 0/255, 1))
				gui.set_id(node_humidite_texte, "texte_orbit_size"..i)
				gui.set_id(node_humidite_texte, "texte_orbit_size"..i)
				gui.set_parent(node_humidite_texte, node_boite)
				gui.set_layer(node_humidite_texte, "Texte")
				gui.set_pivot(node_humidite_texte, gui.PIVOT_W)
			end
			-- text indicating temperature of orbit
			local temperature_nom =  couleur_temp[0]["nom"][lua_lire_systeme(id, "orbite_"..i.."_temp")]
			local temperature_pos = vmath.vector3(100, posY-60, 0)
			local node_temperature_texte = gui.new_text_node(temperature_pos,temperature_nom)
			gui.set_color(node_temperature_texte, vmath.vector4(255/255, 255/255, 0/255, 1))
			gui.set_id(node_temperature_texte, "texte_orbit_size"..i)
			gui.set_parent(node_temperature_texte, node_boite)
			gui.set_layer(node_temperature_texte, "Texte")
			gui.set_pivot(node_temperature_texte, gui.PIVOT_W)
			if  #liste_orbitals[lua_lire_systeme(id, "orbite_"..i)]["taille"] == 0 then
				gui.set_alpha(node_temperature_texte, 0.3)
			end
		end
	end
end