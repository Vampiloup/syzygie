require "Normal.Luas.serveur_variables"

function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed

	msg.post(".", "acquire_input_focus")

	
	local node = gui.get_node('Image_etoile')
	local node2 = gui.get_node('Image_etoile_fond')
	gui.animate(node, "color.w", 1.5, gui.EASING_LINEAR, 5, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
	gui.animate(node2, "scale", 1.5, gui.EASING_LINEAR, 5, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)


	-- initialize variable for planet screen existing or not
	Is_planet_screen_exist = false
	
	--gui root box position.
	
	-- Actuall size of the game's screen 
	--local sg_screen_game = {window.get_size()}
	--local sg_node = gui.get_node('root')
	--local sg_position = vmath.vector3(sg_screen_game[1]/2, sg_screen_game[2]/2, 0)
	--local sg_size = vmath.vector3(sg_screen_game[1], sg_screen_game[2], 0)
	--gui.set_position(sg_node, sg_position)
	--gui.set_size(sg_node, sg_size)
	
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)


	
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)

	if message_id == hash("etoile_click") then
		local node = gui.get_node('Systeme')
		if message.id ~= nil then
			-- Gui = systeme bar ?
			gui.set_enabled(node, true)
			change_contenu(message.id)
			Gui_entered = node			
		else
			fermer_ecran_planete()
			gui.set_enabled(node, false)
			Gui_entered = nill
		end
	end
end

function on_input(self, action_id, action)

	node_orbite_entered = {}
	-- If cursor on top of Fond gui node, change the "don't activate click on objects" variable "Gui_entered "

	local node = gui.get_node('Systeme')

	-- list of enabled GUI nodes possibles
	node_enabled = gui.is_enabled(node)
	node_entered = gui.pick_node(node, action.x, action.y)


	if node_entered and node_enabled then 
		Gui_entered = node
	else
		Gui_entered = nill
	end
	
	if action.pressed  and action_id == hash("touch") then
		if node_entered and node_enabled then
			print ("node entered and enabled (Systeme.gui_script)")
			-- If System bar GUI entered AND clicked, look if one of the Orbit "Buttons" are clicked
			local orbit_clicked = 0
			for i = 1, Systeme_Orbits do
				node2 = gui.get_node("bouton_orbit_"..i)
				if gui.pick_node(node2, action.x, action.y) then
					orbit_clicked = i
				end
			end
			if orbit_clicked > 0 then
				ouvrir_ecran_planete(orbit_clicked)
			else
				fermer_ecran_planete()
			end
		end

		msg.post("/curseur", "gui_pass", {pass = true})


	end

	
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end

function ouvrir_ecran_planete(orbite)
	fermer_ecran_planete()
	Is_planet_screen_exist = true
	-- Placing the "click zone" from each orbit (the black rectangle zone, basically)
	local ecran_planete_pos = vmath.vector3(1120, -580, 0)
	local ecran_planete_size = vmath.vector3(1580, 1000, 0)
	local ecran_planete = gui.new_box_node(ecran_planete_pos,ecran_planete_size)
	local node_parent = gui.get_node("Systeme")
	gui.set_parent(ecran_planete, node_parent)
	gui.set_layer(ecran_planete, "Fond")
	gui.set_alpha(ecran_planete, 0.0)
	gui.set_id(ecran_planete, "ecran_planete_"..0)
	gui.set_texture(ecran_planete, "Interface")
	gui.play_flipbook(ecran_planete, "systeme_panneau_planete")
	gui.set_color(ecran_planete, vmath.vector4(255/255, 255/255, 255/255, 1))
	
	
end

function fermer_ecran_planete()
	-- Destroy the pre-existing "planet screen"
	if Is_planet_screen_exist == true then
		local node_boite = gui.get_node("ecran_planete_0")
		gui.delete_node(node_boite)
		Is_planet_screen_exist = false
	end
end
	

function change_contenu(id)

	local couleur = lua_lire_systeme(id, "couleur")

	--pprint (systeme[id])

	-- show characteristics of the star
	local a = lua_lire_systeme(id, "nom")
	local node = gui.get_node("text")
	gui.set_text(node, a)
	node = gui.get_node("Image_etoile")
	gui.set_texture(node, "Systeme")
	gui.play_flipbook(node, "etoile_"..couleur)
	node = gui.get_node("Image_etoile_fond")
	gui.set_texture(node, "Systeme")
	gui.play_flipbook(node, "couronne_"..couleur)

	-- show objects (planets) list in the system box
	-- Destroy the pre-existing orbitals boxes
	local node_boite = gui.get_node("boite_orbites")
	gui.delete_node(node_boite)
	-- Create new Orbitals box
	node = gui.get_node("Systeme")
	local pos = vmath.vector3(0, 0, 0)
	local size = vmath.vector3(1, 1, 0)
	local node_boite = gui.new_box_node(pos,size)
	gui.set_id(node_boite, "boite_orbites")
	gui.set_parent(node_boite, node)

	
	
	for i = 1, Systeme_Orbits do
		local posY = -225 - (i-1)*150

		-- Placing the "click zone" from each orbit (the black rectangle zone, basically)
		local button_pos = vmath.vector3(32, posY-40, 0)
		local button_size = vmath.vector3(265, 80, 0)
		local node_orbit = gui.new_box_node(button_pos,button_size)
		gui.set_color(node_orbit, vmath.vector4(255/255, 0/255, 0/255, 1))
		gui.set_pivot(node_orbit, gui.PIVOT_W)
		gui.set_parent(node_orbit, node_boite)
		gui.set_layer(node_orbit, "Texte")
		gui.set_alpha(node_orbit, 0.0)
		gui.set_id(node_orbit, "bouton_orbit_"..i)
		
		
		-- Text indicating type of orbital object 
		local tmp = liste_orbitals[lua_lire_systeme(id, "orbite_"..i)]["nom"]
		local pos_type = vmath.vector3(110, posY-20, 0)
		local node2_texte = gui.new_text_node(pos_type,tmp)
		gui.set_id(node2_texte, "texte_orbit"..i)
		gui.set_parent(node2_texte, node_boite)
		gui.set_layer(node2_texte, "Texte")
		gui.set_pivot(node2_texte, gui.PIVOT_W)
		-- Text indicating size of orbital object
		if  #liste_orbitals[lua_lire_systeme(id, "orbite_"..i)]["taille"] > 0 then
			local nom_taille =  liste_orbitals[lua_lire_systeme(id, "orbite_"..i)]["taille"][lua_lire_systeme(id, "orbite_"..i.."_taille")]
			pos = vmath.vector3(130, posY-44, 0)
			local node_taille_texte = gui.new_text_node(pos,nom_taille)
			gui.set_id(node_taille_texte, "texte_orbit_size"..i)
			gui.set_parent(node_taille_texte, node_boite)
			gui.set_layer(node_taille_texte, "Texte")
			gui.set_pivot(node_taille_texte, gui.PIVOT_W)

			-- text indicating humidity of orbit
			local nom_humidite =  lua_SV_wetness_orbit["nom"][lua_lire_systeme(id, "orbite_"..i.."_humidite")]
			pos = vmath.vector3(200, posY-60, 0)
			local node_humidite_texte = gui.new_text_node(pos,nom_humidite)
			gui.set_color(node_humidite_texte, vmath.vector4(0/255, 255/255, 0/255, 1))
			gui.set_id(node_humidite_texte, "texte_orbit_size"..i)
			gui.set_id(node_humidite_texte, "texte_orbit_size"..i)
			gui.set_parent(node_humidite_texte, node_boite)
			gui.set_layer(node_humidite_texte, "Texte")
			gui.set_pivot(node_humidite_texte, gui.PIVOT_W)			
		end
		-- text indicating temperature of orbit
		local nom_temperature =  couleur_temp[0]["nom"][lua_lire_systeme(id, "orbite_"..i.."_temp")]
		pos = vmath.vector3(100, posY-60, 0)
		local node_temperature_texte = gui.new_text_node(pos,nom_temperature)
		gui.set_color(node_temperature_texte, vmath.vector4(255/255, 255/255, 0/255, 1))
		gui.set_id(node_temperature_texte, "texte_orbit_size"..i)
		gui.set_id(node_temperature_texte, "texte_orbit_size"..i)
		gui.set_parent(node_temperature_texte, node_boite)
		gui.set_layer(node_temperature_texte, "Texte")
		gui.set_pivot(node_temperature_texte, gui.PIVOT_W)
		if  #liste_orbitals[lua_lire_systeme(id, "orbite_"..i)]["taille"] == 0 then
			gui.set_alpha(node_temperature_texte, 0.3)
		end

	end
	
	
end